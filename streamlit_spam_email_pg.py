# -*- coding: utf-8 -*-
"""STREAMLIT_SPAM_EMAIL_PG

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Pzuqx3kOmhL5R9YwAVxxTw5tSVvcH5J4

CREATING MY STREAMLIT APP TO DEPLOY MY MODEL
"""

import streamlit as st
import joblib
from transformers import BertTokenizer,BertModel
import torch

"""LOADING MY SPAM EMAIL CLASSIFICATION MODEL"""

from tensorflow.keras.models import load_model
loaded_model = load_model("./spam email classification/spam_email_classification_model.h5")

# Load BERT tokenizer and model
tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')
bert_model = BertModel.from_pretrained('bert-base-uncased')

"""FUNCTION TO PREPROCESS AND EMBED USER_INPUT_TEXT"""

def preprocess_and_embed(text):
    # Tokenize input text
    input_ids = tokenizer.encode(text, add_special_tokens=True, max_length=512, truncation=True, padding='max_length')
    #Convert token IDs to tensor
    input_ids = torch.tensor(input_ids).unsqueeze(0)  # Add batch dimension


# Get BERT embeddings
    with torch.no_grad():
        outputs = bert_model(input_ids)
        embeddings = outputs.last_hidden_state.mean(dim=1)  # Mean pooling over tokens

    return embeddings

"""FUNCTION THAT DOES THE TEXT CLASSIFICATION INTO SPAM OR HAM("NON-SPAM)"""

def classify_text(text):
    embeddings = preprocess_and_embed(text)

    #Predict the class of the input text
    prediction = loaded_model.predict(embeddings)[0]
    return prediction

#Streamlit app
def main():
    st.title("Spam Email Classification")
    st.write("Enter an email text below")

    #Text input for user to enter email text
    input_text = st.text_area("Enter email text here:", "")

    # Classify button
    if st.button("Classify"):
        # Ensure input text is not empty
        if input_text.strip() != "":
            # Classify the input text
            prediction = classify_text(input_text)

            # Display the classification result
            if prediction == 1:
                st.write("This email is classified as **spam**.")
            else:
                st.write("This email is classified as **not spam**.")
        else:
            st.write("Please enter some text.")

if __name__ == "__main__":
    main()
